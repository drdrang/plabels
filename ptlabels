#!/usr/bin/perl

use Getopt::Std;

# Usage/help message.
$usage = <<USAGE;
Usage: ptlabels [options] [filename]
Print tiny labels on Avery 5167 sheets

  -r m : start at row m (range: 1..20; default: 1)
  -c n : start at column n (range 1..4; default: 1)
  -h   : print this message

If no filename is given, use STDIN. A label entry is a plain text
series of non-blank lines. Blank lines separate entries.

The first line of an entry is special. If it starts with a #, then it's
considered a header line. Everything in the header line up to the | is
printed flush left in bold and everything after the | is printed flush
right in bold. Subsequent lines are printed centered in normal weight.
If the first line of an entry doesn't start with #, it uses the header
of the previous entry.
USAGE

# Set up geometry constants for Avery 5167.
$topmargin = 0.55;
$pocol[1]  = 0.45;
$pocol[2]  = 2.50;
$pocol[3]  = 4.55;
$pocol[4]  = 6.60;
$lheight   = 0.50;

# get starting point from command line if present
getopts('hr:c:', \%opt);
die $usage if ($opt{h});

$row = int($opt{r}) || 1;    # chop off any fractional parts and
$col = int($opt{c}) || 1;

# Bail out if position options are out of bounds
die $usage unless (($row >= 1 and $row <= 20) and 
                   ($col >= 1 and $col <= 4));

# Set initial horizontal and vertical positions.
$po = $pocol[$col];
$sp = ($topmargin + ($row - 1)*$lheight);

# Pipe output through groff to printer (manual feed).
open OUT, "| groff | lpr -o ManualFeed=True";
# Change to PDF before sending to printer.
# open OUT, "| groff | ps2pdf - - | lpr -o ManualFeed=True";
# Preview output instead of printing directly.
# open OUT, "| groff | ps2pdf - - | open -f -a /Applications/Preview.app";
# Print raw troff code for debugging.
# open OUT, "> labels.rf";
select OUT;

# Set up document.
print <<SETUP;
.vs 12
.nf
.ll 1.50i
.ta 1.50iR

SETUP

# The troff code for formatting a single entry, with placeholders for
# positioning on the page. The magic numbers embedded in the formatting
# commands make the layout look nice.
$label = <<ENTRY;
.sp |%.2fi
.po %.2fi
.ps 10
.ft HB
%s
.ps 10
.ft H
.ce 2
%s
.ce 0
ENTRY

# Slurp all the input into an array of entries.
$/ = "";
@entries = <>;

$bp = 0;                  # we don't want to start with a page break

foreach $body (@entries) {
  # Parse and transform the header and body.
  if ($body =~ /^#/) {    # it's a header line
    ($header, $body) = split(/\n/, $body, 2);
    $header = substr($header, 1);
    $header =~ s/\|/\t/;
  }  
  $body =~ s/\s+$//;

  # Break page if we ran off the end.
  if ($bp) {
    print "\n.bp\n";      # issue the page break command
    $bp = 0;              # reset flag
  }
  
  # Print the label.
  printf $label, $sp, $po, $header, $body;
  
  # Now we set up for the next entry.
  $col = ($col % 4) + 1;      # step to next column
  $po = $pocol[$col];
  if ($col == 1) {            # we just went down a row
    $row++;
    if ($row > 20) {          # we just went off the bottom
      $bp = 1;                  # start a new page
      $row = 1;                 # at the top
    }
    $sp = ($topmargin + ($row - 1)*$lheight);
  }
}

